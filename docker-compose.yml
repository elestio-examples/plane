version: "3.8"

x-api-and-worker-env: &api-and-worker-env
  DEBUG: ${DEBUG}
  SENTRY_DSN: ${SENTRY_DSN}
  DJANGO_SETTINGS_MODULE: plane.settings.production
  DATABASE_URL: postgres://${PGUSER}:${PGPASSWORD}@${PGHOST}:5432/${PGDATABASE}
  REDIS_URL: redis://plane-redis:6379/
  EMAIL_HOST: ${EMAIL_HOST}
  EMAIL_HOST_USER: ${EMAIL_HOST_USER}
  EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
  EMAIL_PORT: ${EMAIL_PORT}
  EMAIL_FROM: ${EMAIL_FROM}
  EMAIL_USE_TLS: ${EMAIL_USE_TLS}
  EMAIL_USE_SSL: ${EMAIL_USE_SSL}
  AWS_REGION: ${AWS_REGION}
  AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
  AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
  AWS_S3_BUCKET_NAME: ${AWS_S3_BUCKET_NAME}
  AWS_S3_ENDPOINT_URL: ${AWS_S3_ENDPOINT_URL}
  FILE_SIZE_LIMIT: ${FILE_SIZE_LIMIT}
  WEB_URL: ${WEB_URL}
  GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}
  DISABLE_COLLECTSTATIC: 1
  DOCKERIZED: 1
  OPENAI_API_BASE: ${OPENAI_API_BASE}
  OPENAI_API_KEY: ${OPENAI_API_KEY}
  GPT_ENGINE: ${GPT_ENGINE}
  SECRET_KEY: ${SECRET_KEY}
  DEFAULT_EMAIL: ${DEFAULT_EMAIL}
  DEFAULT_PASSWORD: ${DEFAULT_PASSWORD}
  USE_MINIO: ${USE_MINIO}
  ENABLE_SIGNUP: ${ENABLE_SIGNUP}

services:
  planefrontend:
    image: makeplane/plane-frontend:${SOFTWARE_VERSION_TAG}
    restart: always
    command: /usr/local/bin/start.sh apps/app/server.js app
    env_file:
      - .env
    environment:
      NEXT_PUBLIC_API_BASE_URL: ${NEXT_PUBLIC_API_BASE_URL}
      NEXT_PUBLIC_DEPLOY_URL: ${NEXT_PUBLIC_DEPLOY_URL}
      NEXT_PUBLIC_GOOGLE_CLIENTID: "0"
      NEXT_PUBLIC_GITHUB_APP_NAME: "0"
      NEXT_PUBLIC_GITHUB_ID: "0"
      NEXT_PUBLIC_SENTRY_DSN: "0"
      NEXT_PUBLIC_ENABLE_OAUTH: "0"
      NEXT_PUBLIC_ENABLE_SENTRY: "0"
      NEXT_PUBLIC_ENABLE_SESSION_RECORDER: "0"
      NEXT_PUBLIC_TRACK_EVENTS: "0"
    depends_on:
      - planebackend
      - plane-worker

  planebackend:
    image: makeplane/plane-backend:${SOFTWARE_VERSION_TAG}
    restart: always
    command: ./bin/takeoff
    env_file:
      - .env
    environment:
      <<: *api-and-worker-env
    depends_on:
      - plane-db
      - plane-redis

  plane-worker:
    image: makeplane/plane-worker:${SOFTWARE_VERSION_TAG}
    restart: always
    command: ./bin/worker
    env_file:
      - .env
    environment:
      <<: *api-and-worker-env
    depends_on:
      - planebackend
      - plane-db
      - plane-redis

  plane-beat-worker:
    image: makeplane/plane-worker:${SOFTWARE_VERSION_TAG}
    restart: always
    command: ./bin/beat
    env_file:
      - .env
    environment:
      <<: *api-and-worker-env
    depends_on:
      - planebackend
      - plane-db
      - plane-redis

  plane-db:
    image: elestio/postgres:15
    restart: always
    command: postgres -c 'max_connections=1000'
    volumes:
      - ./pgdata:/var/lib/postgresql/data
    env_file:
      - .env
    ports:
      - 172.17.0.1:2489:5432
    environment:
      POSTGRES_USER: ${PGUSER}
      POSTGRES_DB: ${PGDATABASE}
      POSTGRES_PASSWORD: ${PGPASSWORD}
      PGDATA: /var/lib/postgresql/data

  plane-redis:
    image: elestio/redis:6.0
    restart: always
    volumes:
      - ./redisdata:/data

  plane-minio:
    image: minio/minio
    restart: always
    command: server /export --console-address ":9090"
    volumes:
      - ./uploads:/export
    env_file:
      - .env
    environment:
      MINIO_ROOT_USER: ${AWS_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${AWS_SECRET_ACCESS_KEY}

  createbuckets:
    image: minio/mc
    entrypoint: >
      /bin/sh -c " /usr/bin/mc config host add plane-minio http://plane-minio:9000 \$AWS_ACCESS_KEY_ID \$AWS_SECRET_ACCESS_KEY; /usr/bin/mc mb plane-minio/\$AWS_S3_BUCKET_NAME; /usr/bin/mc anonymous set download plane-minio/\$AWS_S3_BUCKET_NAME; exit 0; "
    env_file:
      - .env
    depends_on:
      - plane-minio

  # Comment this if you already have a reverse proxy running
  plane-proxy:
    image: makeplane/plane-proxy:${SOFTWARE_VERSION_TAG}
    ports:
      - 172.17.0.1:2845:80
    env_file:
      - .env
    environment:
      FILE_SIZE_LIMIT: ${FILE_SIZE_LIMIT:-5242880}
      BUCKET_NAME: ${AWS_S3_BUCKET_NAME:-uploads}
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - planefrontend
      - planebackend

  pgadmin4:
    image: dpage/pgadmin4:latest
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${ADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${ADMIN_PASSWORD}
      PGADMIN_LISTEN_PORT: 8080
    ports:
      - "172.17.0.1:8145:8080"
    volumes:
      - ./servers.json:/pgadmin4/servers.json
